#include <kipr/botball.h>

/*
port 0 = right motor
port 1 = left motor

*/
#define miniservo_up 591
#define miniservo_down 1450
#define miniservo_collect 600
#define claw_down 1983
#define claw_up 334
#define claw_open 1024
#define claw_close 141
#define black 3800
#define white 210
#define grey 1800
int gyrocalibrate() {
    int changeGyroZ = 0;//find average gyro value when still
    int i = 0;
    for(i = 0; i < 10000; i++) {
        changeGyroZ += gyro_z();
    }
    changeGyroZ /= 10000;

    return changeGyroZ;
}
void move(int speed, int time, int changeGyroZ) {//speed -100 to 100, time is in miliseconds
    int i = 0;
    int anglechange = 0;
    for(i = 0; i < time; i++) {//gyro move
        anglechange += gyro_z()-changeGyroZ;
        motor(0, speed+anglechange/300);
        motor(1, speed-anglechange/300);
        msleep(1);
    }
    ao();
}
void turn(int direction, int degree, int changeGyroZ) {
    int i = 0;
    int anglechange = 0;
    int x = degree*57000/90;
    if(direction == 1) { // 1 = counterclockwise, 0 = clockwise
        for(i = 0; i < 100; i++) {
            motor(0, 100);
            motor(1, -100);
            msleep(1);
        }
        while(anglechange > -x) {
            anglechange += gyro_z()-changeGyroZ;
            motor(0, 100);
            motor(1, -100);
            msleep(1);
        }
    } else {
        for(i = 0; i < 100; i++) {
            motor(0, -100);
            motor(1, 100);
            msleep(1);
        }
        while(anglechange < x) {
            anglechange += gyro_z()-changeGyroZ;
            motor(0, -100);
            motor(1, 100);
            msleep(1);
        }
    }
    ao();
}
int slowservo(int port, int position) {
    int i = 0;
    int x = get_servo_position(port);
    if(x > position) {
  	  	while(x > position) {
            x -= 10;
        	set_servo_position(port, x);
            msleep(10);
    	}
    } else {
        while(x < position) {
            x += 10;
        	set_servo_position(port, x);
            msleep(5);
    	}
    }
}

void drive_until_line(int port, int color, int speed, int changeGyroZ){
   if(color == white+469){
       int i = 0;
       int anglechange = 0;
       while(analog(port) > color+469){
        	anglechange += gyro_z()-changeGyroZ;
        	motor(0, speed+anglechange/300);
        	motor(1, speed-anglechange/300);
        	msleep(1);
       }
   } else {
       int i = 0;
       int anglechange = 0;
       while(analog(port) < color-1400){
        	anglechange += gyro_z()-changeGyroZ;
        	motor(0, speed+anglechange/300);
        	motor(1, speed-anglechange/300);
        	msleep(1);
       }
   }
   ao();
}
int pick_up_poms()
{
    
    int i;
    
    set_servo_position(2, miniservo_collect);
    msleep(500);
    
    set_servo_position(0, claw_open);
    msleep(500);
    
    set_servo_position(1, claw_down);
    msleep(1000);
    
    set_servo_position(0, claw_close);
    msleep(1500);
    
    slowservo(1, claw_up);
    
    set_servo_position(0, 800);
    msleep(500);
    
    set_servo_position(1, claw_down);
    msleep(500);
    
    set_servo_position(1, claw_up+500);
    msleep(500);
    
    while(i < 2){
        slowservo(2, miniservo_down);
 
        slowservo(2, miniservo_up);
        
        i++;
    }

    
    return 0;
}
void lineSquareUp() {
    while(analog(0) < 1000 && analog(1) < 1500) {
        motor(0, 25);
        motor(1, 25);
        msleep(1);
    }
    ao();
    if(analog(0) > 1000) {
        msleep(1000);
        while(analog(1) < 1500) {
        	motor(0, 30);
            motor(1, -15);
        	msleep(1);
        }
        ao();
        while(analog(0) > 1000) {
            motor(0, -20);
            msleep(1);
        }
    } else if(analog(1) > 1200) {
        msleep(1000);
        while(analog(0) < 1000) {
        	motor(1, 30);
            motor(0, -15);
        	msleep(1);
        }
    } 

    ao();
}
void lineFollow(int port, int time, int color) {
    int i = 0;
    for(i = 0; i < time; i++) {
        motor(0, 75 + (analog(port) - (color+white))/40);
        motor(1, 75 - (analog(port) - (color+white))/40);
        msleep(1);
    }
}

int main()
{
    //start centered on pipe connectors
    int change = gyrocalibrate();
    enable_servos();
    /*
drive_until_line(black, 100, change);
drive_until_line(white+469, 20, change);
*/



    set_servo_position(2, 644);


    set_servo_position(1, claw_up);


    set_servo_position(0, claw_close);
    //Get the first pom
    set_servo_position(0, claw_open);
    msleep(500);
    set_servo_position(1, claw_down);
    msleep(1000);
    set_servo_position(0, claw_close);
    msleep(500);
    set_servo_position(1, claw_up);
    msleep(500);

    //Get the barrel
    move(100, 420, change);
    ao();
    //drive_until_line(grey, 50, change);

    //lineSquareUp();
    
    

    motor(0, -100);
    motor(1, 100);
    msleep(900);

    move(100,731, change);


    drive_until_line(0, black, 50, change);
    
    move(-50, 300, change);


    motor(0, 100);
    motor(1, -100);
    msleep(900);
    ao();
   // lineSquareUp();


    move(-75,900, change);
    msleep(1000);
    
    int i = 0;
       
    while(i<3){
        move(75, 50, change);
        msleep(50);
        move(-100, 75, change);
        msleep(50);
        i++;
    }
	
    move(100, 300, change);
    drive_until_line(1, black, 50, change);
    msleep(500);
    move(100, 375, change);
    set_servo_position(2, miniservo_collect);
    msleep(500);
    set_servo_position(0, claw_open);
    msleep(500);
    set_servo_position(2, miniservo_up);
    msleep(500);
    pick_up_poms();
    move(100, 100, change);
   
    motor(1, -100);
	motor(0, 100);
    msleep(900);
    move(-100, 400, change); 
    //lineFollow(1, 300, black);
    
   
    //Proceed to get leftmost pile of poms


    //turn left
    //execute pom pick up
    //


    disable_servos();
    return 0;

}
