#include <kipr/botball.h>

/*
port 1 = right motor
port 0 = left motor

*/
#define miniservo_up 150
#define miniservo_down 570
#define miniservo_collect 150
#define claw_down 1983
#define claw_up 200
#define claw_open 950
#define claw_close 150
#define slap_rest 0
#define slap_slap 900
#define black 3800
#define white 210
#define grey 1800
int gyrocalibrate() {
    int changeGyroZ = 0;//find average gyro value when still
    int i = 0;
    for(i = 0; i < 5000; i++) {
        changeGyroZ += gyro_z();
    }
    changeGyroZ /= 5000;

    return changeGyroZ;
}
void move(int speed, int time, int changeGyroZ) {//speed -100 to 100, time is in miliseconds
    int i = 0;
    int anglechange = 0;
    for(i = 0; i < time; i++) {//gyro move
        anglechange += gyro_z()-changeGyroZ;
        motor(0, speed+anglechange/300);
        motor(1, speed-anglechange/300);
        msleep(1);
    }
    ao();
}
int movetwo(int speed, int time, int changeGyroZ, int angle) {//speed -100 to 100, time is in miliseconds
    int i = 0;
    int anglechange = 0;
    for(i = 0; i < time; i++) {//gyro move
        anglechange += gyro_z()-changeGyroZ;
        motor(0, speed+anglechange/300);
        motor(1, speed-anglechange/300);
        msleep(1);
    }
    ao();
    return anglechange;
}
void turn(int direction, int degree, int changeGyroZ) {
    int i = 0;
    int anglechange = 0;
    int x = degree*57000/90;
    if(direction == 1) { // 1 = counterclockwise, 0 = clockwise
        for(i = 0; i < 100; i++) {
            motor(0, 100);
            motor(1, -100);
            msleep(1);
        }
        while(anglechange > -x) {
            anglechange += gyro_z()-changeGyroZ;
            motor(0, 100);
            motor(1, -100);
            msleep(1);
        }
    } else {
        for(i = 0; i < 100; i++) {
            motor(0, -100);
            motor(1, 100);
            msleep(1);
        }
        while(anglechange < x) {
            anglechange += gyro_z()-changeGyroZ;
            motor(0, -100);
            motor(1, 100);
            msleep(1);
        }
    }
    ao();
}
int slowservo(int port, int position) {
    int i = 0;
    int x = get_servo_position(port);
    if(x > position) {
        while(x > position) {
            x -= 10;
            set_servo_position(port, x);
            msleep(6);
        }
    } else {
        while(x < position) {
            x += 10;
            set_servo_position(port, x);
            msleep(6);
        }
    }
}
int slowerservo(int port, int position) {
    int i = 0;
    int x = get_servo_position(port);
    if(x > position) {
        while(x > position) {
            x -= 10;
            set_servo_position(port, x);
            msleep(12);
        }
    } else {
        while(x < position) {
            x += 10;
            set_servo_position(port, x);
            msleep(12);
        }
    }
}
void drive_until_line(int port, int color, int speed, int changeGyroZ){
    if(color == white+469){
        int i = 0;
        int anglechange = 0;
        while(analog(port) > color+469){
            anglechange += gyro_z()-changeGyroZ;
            motor(0, speed+anglechange/300);
            motor(1, speed-anglechange/300);
            msleep(1);
        }
    } else {
        int i = 0;
        int anglechange = 0;
        while(analog(port) < color-1400){
            anglechange += gyro_z()-changeGyroZ;
            motor(0, speed+anglechange/300);
            motor(1, speed-anglechange/300);
            msleep(1);
        }
    }
    ao();
}
void drive_until_white(int changeGyroZ){
    int anglechange = 0;
    while(analog(1) > white+500){
        anglechange += gyro_z()-changeGyroZ;
        motor(0, 50+anglechange/300);
        motor(1, 50-anglechange/300);
        msleep(1);
    }
    ao();
}
int pick_up_poms()
{

    int i;

    set_servo_position(2, miniservo_collect);
    msleep(500);

    set_servo_position(0, claw_open);
    msleep(500);

    set_servo_position(1, claw_down);
    msleep(1000);

    set_servo_position(0, claw_close);
    msleep(1500);

    slowservo(1, claw_up);
    msleep(500);

    set_servo_position(0, 600);
    msleep(1500);

    set_servo_position(1, claw_down);
    msleep(500);

    set_servo_position(1, claw_up+500);
    msleep(500);

    while(i < 2){
        slowservo(2, miniservo_down);
		msleep(200);
        slowservo(2, miniservo_up);
		msleep(200);
        i++;
    }


    return 0;
}
void lineSquareUp() {
    while(analog(0) < 3000 && analog(1) < 3000) {
        motor(0, 25);
        motor(1, 25);
        msleep(1);
    }
    ao();
    if(analog(0) > 3000) {
        motor(0, -50);
        msleep(50);
        while(analog(1) < 3000) {
            motor(0, 25);
            msleep(1);
        }
        /*msleep(1000);
        while(analog(1) < 1500) {
        	motor(0, 30);
            motor(1, -15);
        	msleep(1);
        }
        ao();
        while(analog(0) > 1000) {
            motor(0, -20);
            msleep(1);
        }*/
    } else if(analog(1) > 3000) {
        motor(1, -50);
        msleep(50);
        while(analog(0) < 3000) {
            motor(1, 25);
            msleep(1);
        }
        /*msleep(1000);
        while(analog(0) < 1000) {
        	motor(1, 30);
            motor(0, -15);
        	msleep(1);
        }*/
    } 

    ao();
}
void lineFollow(int port, int time, int color) {
    int i = 0;
    for(i = 0; i < time; i++) {
        motor(0, 75 + (analog(port) - (color+white))/40);
        motor(1, 75 - (analog(port) - (color+white))/40);
        msleep(1);
    }
}
void slap() {
    set_servo_position(3, 2040);
    msleep(300);
    set_servo_position(3, 1500);
    msleep(300);
    set_servo_position(3, 2040);
    msleep(200);
    set_servo_position(3, 1500);
    msleep(200);
    set_servo_position(3, 2000);
    msleep(200);
    set_servo_position(3, 1600);
    msleep(200);
    set_servo_position(3, 2000);
    msleep(100);
    set_servo_position(3, 300);
    msleep(300);
}
int main()
{
    //start centered on pipe connectors
    int change = gyrocalibrate();
    enable_servos();
    /*
drive_until_line(black, 100, change);
drive_until_line(white+469, 20, change);
*/


    
    set_servo_position(2, miniservo_up);
    msleep(100);
    set_servo_position(1, claw_up);
    msleep(100);
    set_servo_position(0, claw_close);
    msleep(100);
    set_servo_position(3, 300);
    msleep(100);
    
    
    // THIS IS WHERE LIGHT START AND WAIT FOR LIGHT HAPPENS
    
    
    
    
    //Get the first pom
    set_servo_position(0, claw_open);
    msleep(500);
    set_servo_position(1, claw_down);
    msleep(500);
    set_servo_position(0, claw_close);
    msleep(500);
    set_servo_position(1, claw_up);
    msleep(500);


    //Get the barrel
    move(100, 350, change);
    ao();




    motor(0, -100);
    motor(1, 100);
    msleep(900);

    move(100,731, change);
	msleep(1000);

    drive_until_line(0, black, 50, change);

    move(-50, 300, change);


    motor(0, 100);
    motor(1, -100);
    msleep(920);
    ao();
   // lineSquareUp();


    move(-100, 600, change);

    int i = 0;

    while(i<4){//little square up
        move(75, 50, change);
        msleep(50);
        move(-100, 75, change);
        msleep(50);
        i++;
    }

    move(100, 300, change);
    drive_until_line(1, black, 50, change);// get to the middle line
    drive_until_white(change);
    //lineSquareUp();
    ao();
    msleep(200);
    move(100, 175, change); 
    ao();
    
    
    motor(1, -100);
    motor(0, 100);
    msleep(50);
    
    
    ao();
    /*set_servo_position(2, miniservo_collect);
    msleep(500);*/
    set_servo_position(0, claw_open);
    msleep(500);
    set_servo_position(2, miniservo_up);
    msleep(500);
    pick_up_poms();
    ao();
    motor(1, 100);
    motor(0, -100);
    msleep(50);
    ao();
    msleep(1000);
    move(100, 70, change);

    motor(1, -100);
	motor(0, 100);
    msleep(950);
    
    move(-100, 200, change);
/*    int a = 0;
    for(a = 0; a < 4; a++) {
        motor(0, -100);
    	motor(1, 50);
    	msleep(225);
        motor(1, -100);
    	motor(0, 50);
    	msleep(225);
    }
    ao();
    msleep(1000);
    */
    move(-100, 100, change);
    i = 0;
    while(i<4){//little square up
        move(75, 50, change);
        msleep(50);
        move(-100, 75, change);
        msleep(50);
        i++;
    }
    move(-100, 150, change);
   	msleep(50);
    //start getting rest of poms
    //move(100, 150, change);

    /*motor(1, 100);
	motor(0, -100);
    msleep(300);

    move(100, 200, change);

    motor(1, -100);
	motor(0, 100);
    msleep(310); */


    //set_servo_position(3, 400);
    set_servo_position(0, claw_close);
    set_servo_position(1, claw_up);
    msleep(2000);
    move(100, 200, change);
    
    motor(1, 100);
    motor(0, -100);
    msleep(340);
    
    move(100, 150, change);
    
    motor(1, -100);
    motor(0, 100);
    msleep(340);
    
    

    //--------------------------this is the small adjust, but we don't seem to need it
    /*motor(1, 100);//adjust
    motor(0, -100);
    msleep(350);
    ao();
    move(100, 50, change);
    ao();
    motor(1, -100);
    motor(0, 100);
    msleep(370);*/
    
    //motor(1, -100);//----------------------------this is the thing that replaces the above adjust
    //motor(0, 100);
    //msleep(90);
    move(100, 150, change);
    

    int theangle = 0;
    set_servo_position(1, claw_down-160);
    set_servo_position(0, claw_open);
    set_servo_position(2, miniservo_collect);
    theangle = movetwo(100, 1200, change, theangle);//get to the 2cd/3rd 
    msleep(500);

    set_servo_position(1, claw_down);
    msleep(500);

    slowerservo(0, claw_close);
    msleep(500);
    slowservo(1, claw_up);
    msleep(500);
    slowerservo(0, claw_open);
    msleep(500);
    set_servo_position(1, claw_down);
    msleep(500);
    slowerservo(2, miniservo_down);
    msleep(1000);
    slowerservo(2, miniservo_up);
    msleep(500);
    set_servo_position(0, claw_open);
    msleep(300);
    slap();

    motor(0, 100);
    motor(1, -100);
    msleep(90);
    theangle = movetwo(100, 500, change, theangle);
    msleep(100);
    ao();

    msleep(500);
    slowerservo(0, claw_close);
    msleep(300);
    slowservo(1, claw_up);
    msleep(500);
    slowerservo(0, claw_open+50);
    msleep(500);
    set_servo_position(0, claw_close+600);
    msleep(500);
    set_servo_position(1, claw_down);
    msleep(500);
    slowerservo(2, miniservo_down);
    msleep(1000);
    slowerservo(2, miniservo_up);
    msleep(500);
    set_servo_position(0, claw_open);
    msleep(300);
    //slowerservo(2, miniservo_down);
    //msleep(300);
    slap();

	motor(1, -100);
    motor(0, 100);
    msleep(90);
    theangle = movetwo(100, 700, change, theangle);

    int asdlfkjlaksdflkajsdlkjadsff;
    for(asdlfkjlaksdflkajsdlkjadsff = 0; asdlfkjlaksdflkajsdlkjadsff < 2; asdlfkjlaksdflkajsdlkjadsff++) {
        slowerservo(0, claw_close);
    	msleep(200);
    	slowservo(1, claw_up);
    	msleep(200);
    	slowerservo(0, claw_open+100);
    	msleep(200);
    	set_servo_position(0, claw_close+600);
    	msleep(500);
    	set_servo_position(1, claw_down);
    	msleep(500);
    	slowservo(2, miniservo_down);
    	slowservo(2, miniservo_up);
        slowservo(2, miniservo_down);
    	slowservo(2, miniservo_up);
        //slowservo(2, miniservo_down);
        msleep(1000);
    	set_servo_position(0, claw_open);
    	msleep(300);
    	slap();
    }
	
    set_servo_position(0, claw_close);
    msleep(200);
    set_servo_position(1, claw_up);
    msleep(200);
    
    move(100, 800, change);
    move(-100, 100, change);
    
    motor(0, -100);
    motor(1, 100);
    msleep(920);
    
    move(-100, 1200, change);

    disable_servos();
    return 0;

}
